#!/usr/bin/env bash

BP_DIR=$(cd $(dirname $0); cd ..; pwd)
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

indent() {
  sed -u 's/^/       /'
}

echo 'Running `bin/envvars` inside the buildpack environment' | indent
source $BUILD_DIR/bin/envvars

# give environment to later buildpacks
touch "$BP_DIR/export"
export | grep -E -e ' (PATH|LD_PRELOAD|LD_LIBRARY_PATH|LIBRARY_PATH|INCLUDE_PATH|CPATH|CPPPATH|PKG_CONFIG_PATH)='  >> "$BP_DIR/export"


IMAGE_MAGICK_VERSION="7.0.8-11"
LIBWEBP_VERSION="1.0.0"

VENDOR_DIR="$BUILD_DIR/vendor"
INSTALL_DIR="$VENDOR_DIR/imagemagick-webp"
CACHE_FILE="$CACHE_DIR/imagemagick-$IMAGE_MAGICK_VERSION-webp-$LIBWEBP_VERSION.tar.xz"

PROVISIONING_HOST="https://phoenix-provisioning-resources.s3.amazonaws.com"
WEBP_PROVISIONING_HOST="$PROVISIONING_HOST" # http://downloads.webmproject.org/releases/webp
# SSL cert used on imagemagick not recognized by heroku.
# NOTE: don't use releases from https://www.imagemagick.org/download/releases/
# because are periodically deleted
# IM_PROVISIONING_HOST="https://dl.bintray.com/homebrew/mirror"
# IM_PROVISIONING_HOST="https://www.imagemagick.org/download"
IM_PROVISIONING_HOST="$PROVISIONING_HOST"

mkdir -p $CACHE_DIR
mkdir -p $VENDOR_DIR

if [ ! FLUSH_IM_WEBP_CACHE -a ! -f $CACHE_FILE ]; then

  cd $BUILD_DIR

  # install libwebp

  LIBWEBP_FILE="libwebp-$LIBWEBP_VERSION.tar.gz"
  LIBWEBP_DIR="libwebp-$LIBWEBP_VERSION"
  LIBWEBP_URL="$WEBP_PROVISIONING_HOST/$LIBWEBP_FILE"

  echo "-----> Downloading libwebp from $LIBWEBP_URL"
  curl -L --silent $LIBWEBP_URL | tar xz

  echo "-----> Building libwebp"
  cd $LIBWEBP_DIR
  ./configure --prefix=$INSTALL_DIR --disable-static
  make && make install
  cd ..
  rm -rf $LIBWEBP_DIR

  # install imagemagick

  IMAGE_MAGICK_FILE="imagemagick--$IMAGE_MAGICK_VERSION.tar.xz"
  IMAGE_MAGICK_DIR="ImageMagick-$IMAGE_MAGICK_VERSION"
  IMAGE_MAGICK_URL="$IM_PROVISIONING_HOST/$IMAGE_MAGICK_FILE"

  echo "-----> Downloading ImageMagick from $IMAGE_MAGICK_URL"
  wget $IMAGE_MAGICK_URL

  echo "-----> Extracting ImageMagick from $BUILD_DIR/$IMAGE_MAGICK_FILE"
  if [ ! -f $IMAGE_MAGICK_FILE ]; then
    echo "Error: Unable to download image magick"
    ls
    exit 1;
  fi

  tar xvf $IMAGE_MAGICK_FILE

  echo "-----> Building ImageMagick"
  cd $IMAGE_MAGICK_DIR

  export CPPFLAGS="-I$INSTALL_DIR/include"
  export LDFLAGS="-L$INSTALL_DIR/lib"

  ./configure --prefix=$INSTALL_DIR --with-webp --with-gvc=no --with-quantum-depth=8 --disable-static
  make && make install
  cd ..
  rm -rf $IMAGE_MAGICK_DIR


  # cache for future deploys
  echo "-----> Caching ImageMagick and libwebp installation"
  cd $VENDOR_DIR
  REL_INSTALL_DIR="imagemagick-webp"
  tar czf $REL_INSTALL_DIR.tar.xz $REL_INSTALL_DIR
  mv $REL_INSTALL_DIR.tar.xz $CACHE_FILE

else

  # cache exists, extract it
  echo "-----> Extracting ImageMagick and libwebp $CACHE_FILE => $VENDOR_DIR"
  tar xzf $CACHE_FILE -C $VENDOR_DIR
fi

echo "-----> Updating environment variables"

ln -s $VENDOR_DIR/imagemagick-webp /app/vendor/imagemagick-webp

PROFILE_PATH="$BUILD_DIR/.profile.d/imagemagick-webp.sh"
ACTUAL_INSTALL_PATH="$HOME/vendor/imagemagick-webp"
mkdir -p $(dirname $PROFILE_PATH)

echo "export CPATH=$CPATH:$ACTUAL_INSTALL_PATH/include:$INSTALL_DIR/include" >> $PROFILE_PATH
echo "export PATH=$ACTUAL_INSTALL_PATH/bin:\$PATH" >> $PROFILE_PATH
echo "export PATH=$ACTUAL_INSTALL_PATH/etc/ImageMagick-6:\$PATH" >> $PROFILE_PATH
echo "export LD_LIBRARY_PATH=$ACTUAL_INSTALL_PATH/lib:\$LD_LIBRARY_PATH" >> $PROFILE_PATH
